<?php
/**
 * @author    Christof Moser <christof.moser@actra.ch>
 * @copyright Copyright (c) 2020, Actra AG
 */

namespace framework\form;

use LogicException;
use framework\form\renderer\DefaultComponentRenderer;

abstract class FormComponent extends FormElement
{
	private ?FormRenderer $renderer; // The responsible renderer to generate the HTML-output for this component
	private ?FormComponent $parentFormComponent = null;
	private array $errors = []; // An optional array with error messages that belong to this component
	private array $errorsAsHTML = [];
	private bool $hasHTMLencodedErrors = false;
	private bool $hasErrors = false;

	/**
	 * @param string            $name     : Name of this component which might also be used by the descending classes
	 * @param FormRenderer|null $renderer : The renderer which does generate the html-output for this component. null = use default
	 */
	public function __construct(string $name, ?FormRenderer $renderer = null)
	{
		$this->renderer = $renderer;
		parent::__construct($name);
	}

	public function setRenderer(FormRenderer $renderer): void
	{
		if (!is_null($this->renderer)) {
			throw new LogicException('You cannot overwrite a renderer which is already set');
		}

		$this->renderer = $renderer;
	}

	final protected function setParentFormComponent(FormComponent $parentFormComponent): void
	{
		$this->parentFormComponent = $parentFormComponent;
	}

	/**
	 * Get the renderer for this component and can also optionally set a default renderer if not already set
	 *
	 * @param bool $setDefaultIfNull : Set to true, if we want to set default renderer, if none is set
	 *
	 * @return FormRenderer|null : Renderer or null if not set and we don't want to set the default renderer
	 */
	public function getRenderer(bool $setDefaultIfNull = false): ?FormRenderer
	{
		if (is_null($this->renderer) && $setDefaultIfNull) {
			$this->setRenderer($this->getDefaultRenderer());
		}

		return $this->renderer;
	}

	public function getDefaultRenderer(): FormRenderer
	{
		return new DefaultComponentRenderer($this);
	}

	final public function getErrors(bool $asHTML = false): array
	{
		if (!$asHTML && $this->hasHTMLencodedErrors) {
			throw new LogicException('Warning: You added HTML-formatted errors. You have to get them HTML-formated.');
			/*
			 * This has been added as a best compromise between
			 * legacy code and enforcing proper encoding.
			 * If this is solved somehow "automatically", we might
			 * end up in probably damaged error messages without noticing it:
			 *   $this->errors[] = ($isHTML ? strip_tags(htmlspecialchars_decode($x) : $x);
			 */
		}

		return ($asHTML ? $this->errorsAsHTML : $this->errors);
	}

	final public function hasHTMLencodedErrors(): bool
	{
		return $this->hasHTMLencodedErrors;
	}

	final public function addError(string $errorMessage, bool $isHTML = false): void
	{
		if ($isHTML) {
			$this->hasHTMLencodedErrors = true;
		}
		$this->errors[] = $errorMessage;
		$this->errorsAsHTML[] = $isHTML ? $errorMessage : FormRenderer::htmlEncode($errorMessage);
		$this->setHasErrorsToTrue();
	}

	final public function hasErrors(): bool
	{
		return $this->hasErrors;
	}

	final protected function setHasErrorsToTrue(): void
	{
		$this->hasErrors = true;
		if (!is_null($this->parentFormComponent)) {
			$this->parentFormComponent->setHasErrorsToTrue();
		}
	}

	/**
	 * Gets the FormTag for this component (generated by the renderer)
	 * You can also overwrite this method in child objects to directly return a FormTag, if you don't want to use a renderer.
	 *
	 * @return FormTag|null : Generated FormTag
	 */
	public function getFormTag(): ?FormTag
	{
		$renderer = $this->getRenderer(true);
		$renderer->prepare();

		return $renderer->getFormTag();
	}

	/**
	 * Generate the html-code for this component to be used for output (done by the renderer)
	 *
	 * @return string : Generated html-code
	 */
	public function render(): string
	{
		$formTag = $this->getFormTag();

		return is_null($formTag) ? '' : $formTag->render();
	}
}
/* EOF */