<?php
/**
 * @author    Christof Moser <christof.moser@actra.ch>
 * @copyright Copyright (c) 2021, Actra AG
 */

namespace framework\form;

use LogicException;
use framework\form\renderer\DefaultComponentRenderer;
use framework\html\HtmlElement;
use framework\html\HtmlTag;
use framework\html\HtmlText;

abstract class FormComponent extends HtmlElement
{
	private ?FormRenderer $renderer; // The responsible renderer to generate the HTML-output for this component
	private ?FormComponent $parentFormComponent = null;
	/** @var HtmlText[] */
	private array $errors = [];
	private bool $hasErrors = false;

	/**
	 * @param string            $name     : Name of this component which might also be used by the descending classes
	 * @param FormRenderer|null $renderer : The renderer which does generate the html-output for this component. null = use default
	 */
	public function __construct(string $name, ?FormRenderer $renderer = null)
	{
		$this->renderer = $renderer;
		parent::__construct($name);
	}

	public function setRenderer(FormRenderer $renderer): void
	{
		if (!is_null($this->renderer)) {
			throw new LogicException('You cannot overwrite a renderer which is already set');
		}

		$this->renderer = $renderer;
	}

	final protected function setParentFormComponent(FormComponent $parentFormComponent): void
	{
		$this->parentFormComponent = $parentFormComponent;
	}

	/**
	 * Get the renderer for this component and can also optionally set a default renderer if not already set
	 *
	 * @param bool $setDefaultIfNull : Set to true, if we want to set default renderer, if none is set
	 *
	 * @return FormRenderer|null : Renderer or null if not set and we don't want to set the default renderer
	 */
	public function getRenderer(bool $setDefaultIfNull = false): ?FormRenderer
	{
		if (is_null($this->renderer) && $setDefaultIfNull) {
			$this->setRenderer($this->getDefaultRenderer());
		}

		return $this->renderer;
	}

	public function getDefaultRenderer(): FormRenderer
	{
		return new DefaultComponentRenderer($this);
	}

	/**
	 * @return HtmlText[]
	 */
	public function getErrorsAsHtmlTextObjects(): array
	{
		return $this->errors;
	}

	public function addError(string $errorMessage, bool $isEncodedForRendering): void
	{
		$this->addErrorAsHtmlTextObject(new HtmlText($errorMessage, $isEncodedForRendering));
	}

	public function addErrorAsHtmlTextObject(HtmlText $errorMessageObject): void
	{
		$this->errors[] = $errorMessageObject;
		$this->setHasErrorsToTrue();
	}

	public function hasErrors(bool $withChildElements): bool
	{
		return $withChildElements ? $this->hasErrors : (count($this->errors) > 0);
	}

	final protected function setHasErrorsToTrue(): void
	{
		$this->hasErrors = true;
		if (!is_null($this->parentFormComponent)) {
			$this->parentFormComponent->setHasErrorsToTrue();
		}
	}

	/**
	 * Gets the HtmlTag for this component (generated by the renderer)
	 * You can also overwrite this method in child objects to directly return a HtmlTag, if you don't want to use a renderer.
	 *
	 * @return HtmlTag|null : Generated HtmlTag
	 */
	public function getHtmlTag(): ?HtmlTag
	{
		$renderer = $this->getRenderer(true);
		$renderer->prepare();

		return $renderer->getHtmlTag();
	}

	/**
	 * Generate the html-code for this component to be used for output (done by the renderer)
	 *
	 * @return string : Generated html-code
	 */
	public function render(): string
	{
		$htmlTag = $this->getHtmlTag();

		return is_null($htmlTag) ? '' : $htmlTag->render();
	}
}